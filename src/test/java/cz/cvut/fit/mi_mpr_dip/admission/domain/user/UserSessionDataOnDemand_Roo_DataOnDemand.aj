// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cz.cvut.fit.mi_mpr_dip.admission.domain.user;

import cz.cvut.fit.mi_mpr_dip.admission.domain.user.UserIdentityDataOnDemand;
import cz.cvut.fit.mi_mpr_dip.admission.domain.user.UserSession;
import cz.cvut.fit.mi_mpr_dip.admission.domain.user.UserSessionDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UserSessionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserSessionDataOnDemand: @Component;
    
    private Random UserSessionDataOnDemand.rnd = new SecureRandom();
    
    private List<UserSession> UserSessionDataOnDemand.data;
    
    @Autowired
    private UserIdentityDataOnDemand UserSessionDataOnDemand.userIdentityDataOnDemand;
    
    public UserSession UserSessionDataOnDemand.getNewTransientUserSession(int index) {
        UserSession obj = new UserSession();
        setGrantValidTo(obj, index);
        setIdentifier(obj, index);
        return obj;
    }
    
    public void UserSessionDataOnDemand.setGrantValidTo(UserSession obj, int index) {
        Date grantValidTo = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setGrantValidTo(grantValidTo);
    }
    
    public void UserSessionDataOnDemand.setIdentifier(UserSession obj, int index) {
        String identifier = "identifier_" + index;
        obj.setIdentifier(identifier);
    }
    
    public UserSession UserSessionDataOnDemand.getSpecificUserSession(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserSession obj = data.get(index);
        Long id = obj.getUserSessionId();
        return UserSession.findUserSession(id);
    }
    
    public UserSession UserSessionDataOnDemand.getRandomUserSession() {
        init();
        UserSession obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getUserSessionId();
        return UserSession.findUserSession(id);
    }
    
    public boolean UserSessionDataOnDemand.modifyUserSession(UserSession obj) {
        return false;
    }
    
    public void UserSessionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UserSession.findUserSessionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserSession' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserSession>();
        for (int i = 0; i < 10; i++) {
            UserSession obj = getNewTransientUserSession(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
