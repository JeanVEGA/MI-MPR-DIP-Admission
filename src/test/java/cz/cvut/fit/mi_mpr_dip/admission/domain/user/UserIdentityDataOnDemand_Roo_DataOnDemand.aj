// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cz.cvut.fit.mi_mpr_dip.admission.domain.user;

import cz.cvut.fit.mi_mpr_dip.admission.domain.user.UserIdentity;
import cz.cvut.fit.mi_mpr_dip.admission.domain.user.UserIdentityAuthentication;
import cz.cvut.fit.mi_mpr_dip.admission.domain.user.UserIdentityDataOnDemand;
import cz.cvut.fit.mi_mpr_dip.admission.domain.user.UserPasswordDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UserIdentityDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserIdentityDataOnDemand: @Component;
    
    private Random UserIdentityDataOnDemand.rnd = new SecureRandom();
    
    private List<UserIdentity> UserIdentityDataOnDemand.data;
    
    @Autowired
    private UserPasswordDataOnDemand UserIdentityDataOnDemand.userPasswordDataOnDemand;
    
    public UserIdentity UserIdentityDataOnDemand.getNewTransientUserIdentity(int index) {
        UserIdentity obj = new UserIdentity();
        setAuthentication(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void UserIdentityDataOnDemand.setAuthentication(UserIdentity obj, int index) {
        UserIdentityAuthentication authentication = UserIdentityAuthentication.class.getEnumConstants()[0];
        obj.setAuthentication(authentication);
    }
    
    public void UserIdentityDataOnDemand.setUsername(UserIdentity obj, int index) {
        String username = "username_" + index;
        obj.setUsername(username);
    }
    
    public UserIdentity UserIdentityDataOnDemand.getSpecificUserIdentity(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserIdentity obj = data.get(index);
        Long id = obj.getUserIdentityId();
        return UserIdentity.findUserIdentity(id);
    }
    
    public UserIdentity UserIdentityDataOnDemand.getRandomUserIdentity() {
        init();
        UserIdentity obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getUserIdentityId();
        return UserIdentity.findUserIdentity(id);
    }
    
    public boolean UserIdentityDataOnDemand.modifyUserIdentity(UserIdentity obj) {
        return false;
    }
    
    public void UserIdentityDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UserIdentity.findUserIdentityEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserIdentity' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserIdentity>();
        for (int i = 0; i < 10; i++) {
            UserIdentity obj = getNewTransientUserIdentity(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
